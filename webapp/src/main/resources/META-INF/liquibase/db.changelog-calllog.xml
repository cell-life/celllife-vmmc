<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd">

	<changeSet author="dine@cell-life.org" id="calllog-1">
		<createTable tableName="call_log">
			<column name="id" type="BIGINT">
				<constraints nullable="false" primaryKey="true" />
			</column>
            <column name="date" type="DATETIME" />
            <column name="verboice_id" type="BIGINT" />
			<column name="msisdn" type="VARCHAR(15)" />
            <column name="password" type="VARCHAR(15)" />
            <column name="message_number" type="INT" />
            <column name="channel_name" type="VARCHAR(64)" />
            <column name="call_flow_name" type="VARCHAR(64)" />
            <column name="schedule_name" type="VARCHAR(64)" />
            <column name="state" type="VARCHAR(64)" />
		</createTable>
	</changeSet>

    <changeSet author="dine@cell-life.org" id="callog-2" >
        <addColumn tableName="call_log">
            <column name="password_entered" type="VARCHAR(15)" />
        </addColumn>
    </changeSet>

    <changeSet author="dine@cell-life.org" id="callog-3" >
        <addColumn tableName="call_log">
            <column name="verboice_project_id" type="INT" />
        </addColumn>
    </changeSet>

    <changeSet author="dine@cell-life.org" id="calllog-4">
        <addColumn tableName="call_log">
            <column name="retry_done" type="BOOLEAN" value="0"/>
        </addColumn>
        <addColumn tableName="call_log">
            <column name="attempt" type="INT" />
        </addColumn>
    </changeSet>

    <changeSet author="dine@cell-life.org" id="callog-5">
        <sql>DROP PROCEDURE IF EXISTS findMessageStatuses;</sql>
        <sql splitStatements="false" stripComments="false">
            <![CDATA[
            CREATE PROCEDURE findMessageStatuses()
            BEGIN
            DECLARE x INT;
            DECLARE y INT;
            DECLARE arraySize INTEGER DEFAULT 0;
            DECLARE numberOfMessages INT;
            DECLARE callStatus VARCHAR(64);
            DECLARE thisMsisdn VARCHAR(15);
            DECLARE curs CURSOR FOR
            (SELECT distinct(msisdn) as msisdn FROM vmmc.call_log);

            SET x = 1;
            SET numberOfMessages = (SELECT MAX(message_number) FROM vmmc.call_log);
            SET arraySize = (SELECT count(distinct(msisdn)) FROM vmmc.call_log);
            SET SQL_SAFE_UPDATES = 0;

            DROP TEMPORARY TABLE IF EXISTS resultsTable;
            CREATE TEMPORARY TABLE IF NOT EXISTS resultsTable AS SELECT DISTINCT(msisdn) FROM vmmc.call_log;

            WHILE x <= (numberOfMessages) DO
            SET @sql = CONCAT('ALTER TABLE resultsTable add message', x, ' VARCHAR(32);');
            PREPARE stmt FROM @sql;
            EXECUTE stmt;
            DEALLOCATE PREPARE stmt;
            SET x = x+1;
            END WHILE;

            SET y = 1;
            OPEN curs;
            msisdn_loop : LOOP
            FETCH curs INTO thisMsisdn;
            SET x = 1;
            WHILE x <= (numberOfMessages) DO

            SET @sql = CONCAT('select CASE WHEN state like \'%busy%\' then \'busy\' WHEN state like \'%no_answer%\' then \'No answer\' WHEN password_entered is not null and password=password_entered then \'accepted\' WHEN password_entered is not null and password!=password_entered then \'incorrect password\' ELSE state END into @c1 from vmmc.call_log where msisdn=',thisMsisdn,' and message_number=',x,' order by date desc LIMIT 0,1;');
            SET @c1 = '';
            PREPARE stmt1 FROM @sql;
            EXECUTE stmt1;
            DEALLOCATE PREPARE stmt1;
            SET callStatus = @c1;
            IF callStatus is null then
            SET callStatus = 'null';
            END IF;
            SET @sql = CONCAT('UPDATE resultsTable set message', x, ' = "',callStatus,'" where msisdn=',thisMsisdn,';');
            PREPARE stmt2 FROM @sql;
            EXECUTE stmt2;
            DEALLOCATE PREPARE stmt2;
            SET x = x+1;

            END WHILE;

            IF y = arraySize THEN
            LEAVE msisdn_loop;
            END IF;
            SET y = y+1;

            END loop msisdn_loop;
            CLOSE curs;

            SET SQL_SAFE_UPDATES = 1;

            SELECT * from resultsTable;

            END;
            ]]>
        </sql>
    </changeSet>

</databaseChangeLog>
